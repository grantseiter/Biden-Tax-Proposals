// ===========================================================#
// Title: "AutoIRA_credit"
// File_Author: "Grant M. Seiter -- American Enterprise Institute"
// Date: "September 2020"
// Notes: "Provide for Automatic Enrollment in Individual Retirement Accounts or Annuities ("IRAs")"
          "Policy Parameters: AutoIRA_credit"
          "Input Variables: iratc, ira_credit"
// Desc: Provide automatic enrollment in IRAs for workers who do not have a pension or
          401(k)-type plan. See proposal as detailed by the US Dept. of the Treasury
          (2016, 134-38)
// ===========================================================#

// policy_current_law.json

"AutoIRA_credit": {
    "title": "Provide for Automatic Enrollment in Individual Retirement Accounts or Annuities",
    "description": "Specifies whether or not a credit for automatic enrollment in IRAs will be imputed to taxpayers.",
    "notes": "This parameter is not reflected in current law.",
    "section_1": "Nonrefundable Credits",
    "section_2": "Automatic Enrollment in IRA",
    "indexable": false,
    "indexed": false,
    "type": "bool",
    "value": [
        {
            "year": 2013,
            "value": false
        }
    ],
    "validators": {
        "range": {
            "min": false,
            "max": true
        }
    },
    "compatible_data": {
        "puf": true,
        "cps": true
    }
},

// records_variables.json

"iratc": {
  "type": "float",
  "desc": "automatic ira credit",
  "form": {"2013-20??": "calculated variable"},
  "availability": "taxdata_puf, taxdata_cps"
},
"ira_credit": {
  "type": "float",
  "desc": "Imputed automatic ira credit",
  "form": {"2021-20??": "imputed estimates in records.py"},
  "availability": "taxdata_puf, taxdata_cps"
}

// records.py

# AUTOMATIC ENROLLMENT IN IRAs CREDIT
if year >= 2021:
    # TAXPAYERS' SHARE OF INVESTMENT INCOME
    self.autoira_wt = ((self.e58990 * self.s006) /
                                     np.sum(self.e58990 * self.s006))
    self.autoira_wt[self.e58990 > 0] = (
                  (self.e58990[self.e58990 > 0] * self.s006[self.e58990 > 0])
                  / np.sum(self.e58990[self.e58990 > 0] *
                            self.s006[self.e58990 > 0]))
    # ASSIGN CREDIT TO TAXPAYERS
    # NOTE: VALUES ARE CALCULATED FROM JCT ESTIMATES, SEE /SOURCES FOR MORE.
    total_autoira_credit = {
        2021: 1536000000, 2022: 1606987660,
        2023: 1672606203, 2024: 1745049650,
        2025: 1822372148, 2026: 1903716079,
        2027: 1987856276, 2028: 2071744231,
        2029: 2152944025, 2030: 2235736536}
    self.ira_credit = ((
        self.autoira_wt * total_autoira_credit[year]) /
                           (self.s006))

// calcfunctions.py // lines 803 and 854-867 DONE

@iterate_jit(nopython=True)
def IRATaxCredit(earned_p, earned_s, MARS, AutoIRA_credit, ira_credit,
                 c05800, e07300, iratc):
    """
    Computes nonrefundable automatic enrollment in IRA tax credit.
    """
    # not reflected in current law and records modified with imputation
    if AutoIRA_credit is True:
        iratc = max(0., ira_credit)
    else:
        iratc = 0.
    return iratc

@iterate_jit(nopython=True)
def NonrefundableCredits(c05800, e07240, e07260, e07300, e07400,
                       e07600, p08000, odc,
                       personal_nonrefundable_credit, icgtc, iratc,
                       CR_RetirementSavings_hc, CR_ForeignTax_hc,
                       CR_ResidentialEnergy_hc, CR_GeneralBusiness_hc,
                       CR_MinimumTax_hc, CR_OtherCredits_hc, charity_credit,
                       c07180, c07200, c07220, c07230, c07240,
                       c07260, c07300, c07400, c07600, c08000):

  # IRA credit
    iratc = min(iratc, avail)
    avail = avail - iratc
    return (c07180, c07200, c07220, c07230, c07240, odc,
            c07260, c07300, c07400, c07600, c08000, charity_credit,
            personal_nonrefundable_credit, icgtc, iratc)

@iterate_jit(nopython=True)
def C1040(c05800, c07180, c07200, c07220, c07230, c07240, c07260, c07300,
          c07400, c07600, c08000, e09700, e09800, e09900, niit, othertaxes,
          c07100, c09200, odc, charity_credit,
          personal_nonrefundable_credit, icgtc, iratc):
    """
    Computes total used nonrefundable credits, c07100, othertaxes, and
    income tax before refundable credits, c09200.
    """
    # total used nonrefundable credits (as computed in NonrefundableCredits)
    c07100 = (c07180 + c07200 + c07600 + c07300 + c07400 + c07220 + c08000 +
              c07230 + c07240 + c07260 + odc + charity_credit +
              personal_nonrefundable_credit + icgtc + iratc)
    # tax after credits (2016 Form 1040, line 56)
    tax_net_nonrefundable_credits = max(0., c05800 - c07100)
    # tax (including othertaxes) before refundable credits
    othertaxes = e09700 + e09800 + e09900 + niit
    c09200 = othertaxes + tax_net_nonrefundable_credits
    return (c07100, othertaxes, c09200)


// calculator.py // lines NONE DONE

from taxcalc.calcfunctions import (TaxInc, SchXYZTax, GainsTax, AGIsurtax,
                                   NetInvIncTax, AMT, EI_PayrollTax, Adj,
                                   DependentCare, ALD_InvInc_ec_base, CapGains,
                                   SSBenefits, UBI, AGI, ItemDedCap, ItemDed,
                                   StdDed, AdditionalMedicareTax, F2441, EITC,
                                   RefundablePayrollTaxCredit,
                                   ChildDepTaxCredit, AdditionalCTC, CTC_new, CDCC_new,
                                   PersonalTaxCredit, IRADCTaxCredit, FTHBTaxCredit, SchR,
                                   AmOppCreditParts, EducationTaxCredit,
                                   CharityCredit, ICGTaxCredit, IRATaxCredit,
                                   NonrefundableCredits, C1040, IITAX,
                                   BenefitSurtax, BenefitLimitation,
                                   FairShareTax, LumpSumTax, BenefitPrograms,
                                   ExpandIncome, AfterTaxIncome)
           
# Calculate taxes with optimal itemized deduction
self._taxinc_to_amt()
F2441(self.__policy, self.__records)
EITC(self.__policy, self.__records)
RefundablePayrollTaxCredit(self.__policy, self.__records)
PersonalTaxCredit(self.__policy, self.__records)
IRADCTaxCredit(self.__policy, self.__records)
FTHBTaxCredit(self.__policy, self.__records)
ICGTaxCredit(self.__policy, self.__records)
IRATaxCredit(self.__policy, self.__records)
